local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TextService = game:GetService("TextService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local CelestialLibrary = {
    Name = "Celestial UI",
    Version = "1.0.0",
    Tabs = {},
    Elements = {},
    Themes = {
        Dark = {
            Primary = Color3.fromRGB(25, 25, 30),
            Secondary = Color3.fromRGB(35, 35, 40),
            Accent = Color3.fromRGB(120, 120, 255),
            Text = Color3.fromRGB(240, 240, 240),
            SubText = Color3.fromRGB(170, 170, 170),
            Border = Color3.fromRGB(60, 60, 65),
            Divider = Color3.fromRGB(50, 50, 55),
            DropdownOption = Color3.fromRGB(30, 30, 35),
            DropdownBorder = Color3.fromRGB(50, 50, 55),
            DropdownFrame = Color3.fromRGB(35, 35, 40),
            DropdownHolder = Color3.fromRGB(30, 30, 35),
            SliderRail = Color3.fromRGB(40, 40, 45),
            ToggleSlider = Color3.fromRGB(150, 150, 150),
            ToggleToggled = Color3.fromRGB(255, 255, 255),
            InputBackground = Color3.fromRGB(40, 40, 45),
            InputBorder = Color3.fromRGB(65, 65, 70),
            InElementBorder = Color3.fromRGB(80, 80, 85),
            NotificationBackground = Color3.fromRGB(30, 30, 35),
            NotificationBorder = Color3.fromRGB(50, 50, 55),
            DialogInput = Color3.fromRGB(45, 45, 50),
        },
        Light = {
            Primary = Color3.fromRGB(240, 240, 245),
            Secondary = Color3.fromRGB(230, 230, 235),
            Accent = Color3.fromRGB(80, 80, 255),
            Text = Color3.fromRGB(40, 40, 40),
            SubText = Color3.fromRGB(90, 90, 90),
            Border = Color3.fromRGB(200, 200, 205),
            Divider = Color3.fromRGB(210, 210, 215),
            DropdownOption = Color3.fromRGB(225, 225, 230),
            DropdownBorder = Color3.fromRGB(200, 200, 205),
            DropdownFrame = Color3.fromRGB(220, 220, 225),
            DropdownHolder = Color3.fromRGB(235, 235, 240),
            SliderRail = Color3.fromRGB(220, 220, 225),
            ToggleSlider = Color3.fromRGB(150, 150, 150),
            ToggleToggled = Color3.fromRGB(50, 50, 50),
            InputBackground = Color3.fromRGB(225, 225, 230),
            InputBorder = Color3.fromRGB(200, 200, 205),
            InElementBorder = Color3.fromRGB(180, 180, 185),
            NotificationBackground = Color3.fromRGB(235, 235, 240),
            NotificationBorder = Color3.fromRGB(200, 200, 205),
            DialogInput = Color3.fromRGB(215, 215, 220),
        },
        Ocean = {
            Primary = Color3.fromRGB(20, 25, 40),
            Secondary = Color3.fromRGB(30, 35, 50),
            Accent = Color3.fromRGB(50, 150, 255),
            Text = Color3.fromRGB(240, 240, 240),
            SubText = Color3.fromRGB(170, 170, 180),
            Border = Color3.fromRGB(45, 50, 70),
            Divider = Color3.fromRGB(40, 45, 60),
            DropdownOption = Color3.fromRGB(25, 30, 45),
            DropdownBorder = Color3.fromRGB(45, 50, 70),
            DropdownFrame = Color3.fromRGB(30, 35, 50),
            DropdownHolder = Color3.fromRGB(25, 30, 45),
            SliderRail = Color3.fromRGB(35, 40, 55),
            ToggleSlider = Color3.fromRGB(140, 150, 170),
            ToggleToggled = Color3.fromRGB(255, 255, 255),
            InputBackground = Color3.fromRGB(35, 40, 55),
            InputBorder = Color3.fromRGB(60, 65, 80),
            InElementBorder = Color3.fromRGB(75, 80, 95),
            NotificationBackground = Color3.fromRGB(25, 30, 45),
            NotificationBorder = Color3.fromRGB(45, 50, 70),
            DialogInput = Color3.fromRGB(40, 45, 60),
        },
        Midnight = {
            Primary = Color3.fromRGB(15, 15, 20),
            Secondary = Color3.fromRGB(25, 25, 30),
            Accent = Color3.fromRGB(120, 60, 255),
            Text = Color3.fromRGB(240, 240, 240),
            SubText = Color3.fromRGB(170, 170, 170),
            Border = Color3.fromRGB(40, 40, 45),
            Divider = Color3.fromRGB(35, 35, 40),
            DropdownOption = Color3.fromRGB(20, 20, 25),
            DropdownBorder = Color3.fromRGB(40, 40, 45),
            DropdownFrame = Color3.fromRGB(25, 25, 30),
            DropdownHolder = Color3.fromRGB(20, 20, 25),
            SliderRail = Color3.fromRGB(30, 30, 35),
            ToggleSlider = Color3.fromRGB(140, 140, 150),
            ToggleToggled = Color3.fromRGB(240, 240, 240),
            InputBackground = Color3.fromRGB(30, 30, 35),
            InputBorder = Color3.fromRGB(50, 50, 55),
            InElementBorder = Color3.fromRGB(70, 70, 75),
            NotificationBackground = Color3.fromRGB(20, 20, 25),
            NotificationBorder = Color3.fromRGB(40, 40, 45),
            DialogInput = Color3.fromRGB(35, 35, 40),
        },
        Crimson = {
            Primary = Color3.fromRGB(30, 20, 25),
            Secondary = Color3.fromRGB(40, 25, 30),
            Accent = Color3.fromRGB(255, 80, 100),
            Text = Color3.fromRGB(240, 240, 240),
            SubText = Color3.fromRGB(180, 170, 170),
            Border = Color3.fromRGB(60, 45, 50),
            Divider = Color3.fromRGB(50, 40, 45),
            DropdownOption = Color3.fromRGB(35, 25, 30),
            DropdownBorder = Color3.fromRGB(60, 45, 50),
            DropdownFrame = Color3.fromRGB(40, 30, 35),
            DropdownHolder = Color3.fromRGB(35, 25, 30),
            SliderRail = Color3.fromRGB(45, 35, 40),
            ToggleSlider = Color3.fromRGB(160, 140, 150),
            ToggleToggled = Color3.fromRGB(255, 255, 255),
            InputBackground = Color3.fromRGB(45, 35, 40),
            InputBorder = Color3.fromRGB(65, 55, 60),
            InElementBorder = Color3.fromRGB(80, 70, 75),
            NotificationBackground = Color3.fromRGB(35, 25, 30),
            NotificationBorder = Color3.fromRGB(60, 45, 50),
            DialogInput = Color3.fromRGB(50, 40, 45),
        },
    },
    CurrentTheme = "Dark",
    Transparency = false,
    UseAcrylic = false,
    Options = {},
    Flags = {},
    OpenFrames = {},
    Notifications = {},
    NotificationSize = 24,
    ThemeObjects = {},
    ToggleKey = Enum.KeyCode.RightShift,
    MinimizeKey = Enum.KeyCode.RightControl,
}

local KeyNames = {
    [Enum.KeyCode.LeftControl] = "LCtrl",
    [Enum.KeyCode.RightControl] = "RCtrl",
    [Enum.KeyCode.LeftShift] = "LShift",
    [Enum.KeyCode.RightShift] = "RShift",
    [Enum.KeyCode.LeftAlt] = "LAlt",
    [Enum.KeyCode.RightAlt] = "RAlt",
    [Enum.UserInputType.MouseButton1] = "MB1",
    [Enum.UserInputType.MouseButton2] = "MB2",
    [Enum.UserInputType.MouseButton3] = "MB3",
}

-- Creator utility
local Creator = {}

function Creator.New(Class, Properties, Children)
    local Object = Instance.new(Class)
    
    for Index, Value in next, Properties or {} do
        if Index == "ThemeTag" then
            CelestialLibrary:AddThemeObject(Object, Value)
        else
            Object[Index] = Value
        end
    end
    
    for _, Child in next, Children or {} do
        Child.Parent = Object
    end
    
    return Object
end

function Creator.AddSignal(Signal, Function)
    local Connection = Signal:Connect(Function)
    return Connection
end

function Creator.Round(Number, Divider)
    Divider = Divider or 1
    return math.floor(Number / Divider + 0.5) * Divider
end

function Creator.GetTextSize(Text, Font, Size, Resolution)
    local Resolution = Resolution or Vector2.new(1000, 1000)
    return TextService:GetTextSize(Text, Size, Font, Resolution)
end

function Creator.GetMouseLocation()
    return UserInputService:GetMouseLocation()
end

function Creator.SpringMotor(Initial, Object, Property)
    local Spring = {}
    
    local Target = Initial
    local Position = Target
    local Velocity = 0
    
    local Damping = 1
    local Stiffness = 100
    local TimeTick = 0.01
    local LastUpdate = tick()
    
    local Connection
    
    local function UpdateSpring()
        local Now = tick()
        local DeltaTime = math.min(Now - LastUpdate, 0.1)
        LastUpdate = Now
        
        local Acceleration = Stiffness * (Target - Position) - Damping * Velocity
        Velocity = Velocity + Acceleration * DeltaTime
        Position = Position + Velocity * DeltaTime
        
        Object[Property] = Position
        
        if math.abs(Target - Position) < 0.001 and math.abs(Velocity) < 0.001 then
            Object[Property] = Target
            Connection:Disconnect()
            Connection = nil
        end
    end
    
    function Spring.SetValue(Value)
        Target = Value
        
        if not Connection then
            Connection = RunService.Heartbeat:Connect(UpdateSpring)
        end
    end
    
    function Spring.GetValue()
        return Target
    end
    
    return Spring, Spring.SetValue
end

function Creator.OverrideTag(Object, Tag)
    if not Object or not Tag then return end
    
    for Property, Value in next, Tag do
        if not CelestialLibrary.ThemeObjects[Object] then
            CelestialLibrary.ThemeObjects[Object] = {}
        end
        
        CelestialLibrary.ThemeObjects[Object][Property] = Value
    end
    
    CelestialLibrary:UpdateTheme()
end

-- Utility Functions
function CelestialLibrary:Round(Number, Divider)
    return Creator.Round(Number, Divider)
end

function CelestialLibrary:AddThemeObject(Object, Tag)
    if not Object or not Tag then return end
    
    for Property, Value in next, Tag do
        if not self.ThemeObjects[Object] then
            self.ThemeObjects[Object] = {}
        end
        
        self.ThemeObjects[Object][Property] = Value
    end
end

function CelestialLibrary:UpdateTheme()
    for Object, Properties in next, self.ThemeObjects do
        if not Object or typeof(Object) ~= "Instance" or not Object:IsDescendantOf(game) then
            self.ThemeObjects[Object] = nil
            continue
        end
        
        for Property, Value in next, Properties do
            if Value and self.Themes[self.CurrentTheme][Value] then
                Object[Property] = self.Themes[self.CurrentTheme][Value]
            end
        end
    end
end

function CelestialLibrary:SetTheme(Theme)
    if self.Themes[Theme] then
        self.CurrentTheme = Theme
        self:UpdateTheme()
    end
end

function CelestialLibrary:ToggleAcrylic(Value)
    self.UseAcrylic = Value
    self.MainBlur.Enabled = Value
end

function CelestialLibrary:ToggleTransparency(Value)
    self.Transparency = Value
    self:UpdateTheme()
end

function CelestialLibrary:SafeCallback(Callback, ...)
    local Success, Error = pcall(Callback, ...)
    
    if not Success then
        warn("Celestial UI | Error in callback:", Error)
    end
end

function CelestialLibrary:GetFontFromName(Name)
    if Name == "Default" or Name == "Gotham" then
        return Font.new("rbxasset://fonts/families/GothamSSm.json")
    elseif Name == "Ubuntu" then
        return Font.new("rbxasset://fonts/families/Ubuntu.json")
    elseif Name == "SourceSans" then
        return Font.new("rbxasset://fonts/families/SourceSansPro.json")
    elseif Name == "Poppins" then
        return Font.new("rbxasset://fonts/families/Poppins.json")
    elseif Name == "RobotoCondensed" then
        return Font.new("rbxasset://fonts/families/RobotoCondensed.json")
    elseif Name == "Inter" then
        return Font.new("rbxasset://fonts/families/Inter.json")
    end
    
    return Font.new("rbxasset://fonts/families/GothamSSm.json")
end

function CelestialLibrary:Create(Config)
    Config = Config or {}
    
    Config.Name = Config.Name or "Celestial UI"
    Config.Size = Config.Size or UDim2.fromOffset(600, 400)
    Config.Theme = Config.Theme or "Dark"
    Config.Acrylic = Config.Acrylic or false
    Config.Transparency = Config.Transparency or false
    Config.Font = Config.Font or "Default"
    Config.FillScreen = Config.FillScreen or false
    Config.ToggleKey = Config.ToggleKey or Enum.KeyCode.RightShift
    
    -- Set the font
    self.Font = self:GetFontFromName(Config.Font)
    self.ToggleKey = Config.ToggleKey
    
    -- Apply settings
    self:SetTheme(Config.Theme)
    self.UseAcrylic = Config.Acrylic
    self.Transparency = Config.Transparency
    
    -- Create the GUI
    local ScreenGui = Creator.New("ScreenGui", {
        Name = Config.Name,
        DisplayOrder = 100,
        IgnoreGuiInset = true,
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Global,
    })
    
    -- Set parent
    if syn and syn.protect_gui then
        syn.protect_gui(ScreenGui)
        ScreenGui.Parent = CoreGui
    elseif gethui then
        ScreenGui.Parent = gethui()
    else
        ScreenGui.Parent = CoreGui
    end
    
    self.Minimized = false
    self.Toggled = true
    self.GUI = ScreenGui
    
    -- Create MainBlur
    self.MainBlur = Creator.New("BlurEffect", {
        Size = 12,
        Enabled = Config.Acrylic,
        Parent = game:GetService("Lighting"),
    })
    
    -- Create Notifications Container
    self.NotificationsFrame = Creator.New("Frame", {
        Position = UDim2.new(1, -20, 1, -20),
        Size = UDim2.new(0, 300, 1, -40),
        AnchorPoint = Vector2.new(1, 1),
        BackgroundTransparency = 1,
        Parent = ScreenGui,
    }, {
        Creator.New("UIListLayout", {
            Padding = UDim.new(0, 10),
            FillDirection = Enum.FillDirection.Vertical,
            HorizontalAlignment = Enum.HorizontalAlignment.Right,
            VerticalAlignment = Enum.VerticalAlignment.Bottom,
            SortOrder = Enum.SortOrder.LayoutOrder,
        })
    })
    
    -- Create Main Container
    local MainFrameSize = Config.FillScreen and UDim2.fromScale(1, 1) or Config.Size
    
    self.MainFrame = Creator.New("Frame", {
        Size = MainFrameSize,
        Position = Config.FillScreen and UDim2.fromScale(0.5, 0.5) or UDim2.fromScale(0.5, 0.5),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = self.Transparency and 0.2 or 0,
        Visible = self.Toggled,
        Parent = ScreenGui,
        ThemeTag = {
            BackgroundColor3 = "Primary"
        }
    }, {
        Creator.New("UICorner", {
            CornerRadius = UDim.new(0, 8)
        }),
        Creator.New("UIStroke", {
            Thickness = 1,
            Transparency = 0.5,
            ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
            ThemeTag = {
                Color = "Border"
            }
        })
    })
    
    -- Create Header
    self.HeaderFrame = Creator.New("Frame", {
        Size = UDim2.new(1, 0, 0, 50),
        ClipsDescendants = true,
        BackgroundTransparency = 0,
        ThemeTag = {
            BackgroundColor3 = "Secondary"
        },
        Parent = self.MainFrame
    }, {
        Creator.New("UICorner", {
            CornerRadius = UDim.new(0, 8)
        }),
        Creator.New("Frame", {
            Size = UDim2.new(1, 0, 0, 10),
            Position = UDim2.new(0, 0, 1, -5),
            ZIndex = 0,
            ThemeTag = {
                BackgroundColor3 = "Secondary"
            }
        })
    })
    
    -- Create title & subtitle
    self.TitleLabel = Creator.New("TextLabel", {
        FontFace = self.Font,
        Text = Config.Name,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 16,
        TextWrapped = true,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Center,
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 200, 1, 0),
        Position = UDim2.new(0, 15, 0, 0),
        ThemeTag = {
            TextColor3 = "Text"
        },
        Parent = self.HeaderFrame
    })
    
    -- Create buttons
    local ButtonHolder = Creator.New("Frame", {
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -10, 0, 0),
        Size = UDim2.new(0, 120, 1, 0),
        AnchorPoint = Vector2.new(1, 0),
        Parent = self.HeaderFrame
    }, {
        Creator.New("UIListLayout", {
            FillDirection = Enum.FillDirection.Horizontal,
            HorizontalAlignment = Enum.HorizontalAlignment.Right,
            SortOrder = Enum.SortOrder.LayoutOrder,
            VerticalAlignment = Enum.VerticalAlignment.Center,
            Padding = UDim.new(0, 8)
        })
    })
    
    -- Create minimize button
    self.MinimizeButton = Creator.New("ImageButton", {
        AutoButtonColor = false,
        BackgroundTransparency = 1,
        Image = "rbxassetid://10709790907",
        Size = UDim2.fromOffset(16, 16),
        ThemeTag = {
            ImageColor3 = "SubText"
        },
        Parent = ButtonHolder
    })
    
    -- Create close button
    self.CloseButton = Creator.New("ImageButton", {
        AutoButtonColor = false,
        BackgroundTransparency = 1,
        Image = "rbxassetid://10709790763",
        Size = UDim2.fromOffset(16, 16),
        ThemeTag = {
            ImageColor3 = "SubText"
        },
        Parent = ButtonHolder
    })
    
    -- Create TabContainer
    self.TabContainer = Creator.New("Frame", {
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 50),
        Size = UDim2.new(1, 0, 1, -50),
        ZIndex = 2,
        Parent = self.MainFrame
    })
    
    -- Handle buttons events
    Creator.AddSignal(self.MinimizeButton.MouseButton1Click, function()
        self:Minimize()
    end)
    
    Creator.AddSignal(self.CloseButton.MouseButton1Click, function()
        self:Toggle()
    end)
    
    -- Make Header draggable
    local Dragging = false
    local DragStart = nil
    local StartPosition = nil
    
    Creator.AddSignal(self.HeaderFrame.InputBegan, function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
            Dragging = true
            DragStart = Input.Position
            StartPosition = self.MainFrame.Position
        end
    end)
    
    Creator.AddSignal(UserInputService.InputChanged, function(Input)
        if Dragging and (Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch) then
            local Delta = Input.Position - DragStart
            self.MainFrame.Position = UDim2.new(
                StartPosition.X.Scale,
                StartPosition.X.Offset + Delta.X,
                StartPosition.Y.Scale,
                StartPosition.Y.Offset + Delta.Y
            )
        end
    end)
    
    Creator.AddSignal(UserInputService.InputEnded, function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
            Dragging = false
        end
    end)
    
    -- Handle toggling
    Creator.AddSignal(UserInputService.InputBegan, function(Input)
        if Input.KeyCode == self.ToggleKey then
            self:Toggle()
        end
        
        if Input.KeyCode == self.MinimizeKey then
            self:Minimize()
        end
    end)
    
    -- Create Tablist
    self.TabList = Creator.New("Frame", {
        Size = UDim2.new(1, 0, 0, 36),
        BackgroundTransparency = 0,
        Parent = self.TabContainer,
        ThemeTag = {
            BackgroundColor3 = "Secondary"
        }
    }, {
        Creator.New("UICorner", {
            CornerRadius = UDim.new(0, 6)
        }),
        Creator.New("UIStroke", {
            Thickness = 1,
            Transparency = 0.5,
            ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
            ThemeTag = {
                Color = "Border"
            }
        }),
        Creator.New("ScrollingFrame", {
            Size = UDim2.new(1, -40, 1, 0),
            Position = UDim2.new(0, 10, 0, 0),
            Active = true,
            BackgroundTransparency = 1,
            ScrollBarImageTransparency = 1,
            ScrollBarThickness = 0,
            CanvasSize = UDim2.new(0, 0, 0, 0)
        }, {
            Creator.New("UIListLayout", {
                FillDirection = Enum.FillDirection.Horizontal,
                HorizontalAlignment = Enum.HorizontalAlignment.Left,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 4)
            })
        })
    })
    
    -- Create TabDisplay
    self.TabDisplay = Creator.New("Frame", {
        Size = UDim2.new(1, 0, 1, -36),
        Position = UDim2.new(0, 0, 0, 36),
        BackgroundTransparency = 1,
        ClipsDescendants = true,
        Parent = self.TabContainer
    })
    
    return self
end

function CelestialLibrary:Toggle()
    self.Toggled = not self.Toggled
    self.MainFrame.Visible = self.Toggled
    self.MainBlur.Enabled = (self.UseAcrylic and self.Toggled) and true or false
end

function CelestialLibrary:Minimize()
    self.Minimized = not self.Minimized
    self.TabContainer.Visible = not self.Minimized
    
    self.MainFrame.Size = self.Minimized 
        and UDim2.new(self.MainFrame.Size.X.Scale, self.MainFrame.Size.X.Offset, 0, 50) 
        or UDim2.new(self.MainFrame.Size.X.Scale, self.MainFrame.Size.X.Offset, self.MainFrame.Size.Y.Scale, self.MainFrame.Size.Y.Offset)
    
    self.MinimizeButton.Image = self.Minimized and "rbxassetid://10709790880" or "rbxassetid://10709790907"
end

function CelestialLibrary:AddTab(Name, Icon)
    local ScrollingFrame = self.TabList.ScrollingFrame
    local TabDisplay = self.TabDisplay
    
    -- Create tab button
    local TabButton = Creator.New("Frame", {
        Size = UDim2.new(0, 120, 1, 0),
        BackgroundTransparency = 1,
        Parent = ScrollingFrame
    }, {
        Creator.New("TextButton", {
            FontFace = self.Font,
            Text = Name,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Center,
            TextYAlignment = Enum.TextYAlignment.Center,
            BackgroundTransparency = 1,
            Size = UDim2.fromScale(1, 1),
            Parent = ScrollingFrame,
            ThemeTag = {
                TextColor3 = "SubText"
            }
        })
    })
    
    if Icon then
        local IconImage = Creator.New("ImageLabel", {
            Image = Icon,
            Size = UDim2.fromOffset(16, 16),
            Position = UDim2.new(0, 10, 0.5, 0),
            AnchorPoint = Vector2.new(0, 0.5),
            BackgroundTransparency = 1,
            Parent = TabButton,
            ThemeTag = {
                ImageColor3 = "SubText"
            }
        })
        
        TabButton.TextButton.Position = UDim2.new(0, 36, 0, 0)
        TabButton.TextButton.Size = UDim2.new(1, -36, 1, 0)
        TabButton.TextButton.TextXAlignment = Enum.TextXAlignment.Left
    end
    
    -- Create container for sections
    local Container = Creator.New("ScrollingFrame", {
        Size = UDim2.fromScale(1, 1),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarThickness = 3,
        ScrollBarImageTransparency = 0,
        VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar,
        ScrollingDirection = Enum.ScrollingDirection.Y,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        Visible = false,
        Parent = TabDisplay
    }, {
        Creator.New("UIListLayout", {
            FillDirection = Enum.FillDirection.Vertical,
            HorizontalAlignment = Enum.HorizontalAlignment.Left,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10)
        }),
        Creator.New("UIPadding", {
            PaddingLeft = UDim.new(0, 10),
            PaddingRight = UDim.new(0, 10),
            PaddingTop = UDim.new(0, 10),
            PaddingBottom = UDim.new(0, 10)
        })
    })
    
    -- Adjust canvas size when children change
    Creator.AddSignal(Container.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
        Container.CanvasSize = UDim2.new(0, 0, 0, Container.UIListLayout.AbsoluteContentSize.Y + 20)
    end)
    
    -- Tab functionality
    local Tab = {
        Name = Name,
        Container = Container,
        Sections = {},
        Button = TabButton
    }
    
    function Tab:Select()
        for _, OtherTab in ipairs(CelestialLibrary.Tabs) do
            OtherTab.Container.Visible = false
            OtherTab.Button.BackgroundTransparency = 1
            Creator.OverrideTag(OtherTab.Button.TextButton, { TextColor3 = "SubText" })
            if OtherTab.Button:FindFirstChild("ImageLabel") then
                Creator.OverrideTag(OtherTab.Button.ImageLabel, { ImageColor3 = "SubText" })
            end
        end
        
        Tab.Container.Visible = true
        Tab.Button.BackgroundTransparency = 0.8
        Creator.OverrideTag(Tab.Button.TextButton, { TextColor3 = "Text" })
        if Tab.Button:FindFirstChild("ImageLabel") then
            Creator.OverrideTag(Tab.Button.ImageLabel, { ImageColor3 = "Text" })
        end
    end
    
    function Tab:AddSection(Title)
        local SectionFrame = Creator.New("Frame", {
            Size = UDim2.new(1, 0, 0, 36),
            BackgroundTransparency = 0,
            ClipsDescendants = true,
            Parent = Tab.Container,
            ThemeTag = {
                BackgroundColor3 = "Secondary"
            }
        }, {
            Creator.New("UICorner", {
                CornerRadius = UDim.new(0, 6)
            }),
            Creator.New("UIStroke", {
                Thickness = 1,
                Transparency = 0.5,
                ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
                ThemeTag = {
                    Color = "Border"
                }
            })
        })
        
        -- Create section title
        local SectionTitle = Creator.New("TextLabel", {
            FontFace = CelestialLibrary.Font,
            Text = Title,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -20, 0, 36),
            Position = UDim2.new(0, 10, 0, 0),
            Parent = SectionFrame,
            ThemeTag = {
                TextColor3 = "Text"
            }
        })
        
        -- Create container for elements
        local SectionContainer = Creator.New("Frame", {
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -20, 1, -36),
            Position = UDim2.new(0, 10, 0, 36),
            Parent = SectionFrame
        }, {
            Creator.New("UIListLayout", {
                FillDirection = Enum.FillDirection.Vertical,
                HorizontalAlignment = Enum.HorizontalAlignment.Left,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 8)
            })
        })
        
        -- Calculate the size of the section based on its contents
        Creator.AddSignal(SectionContainer.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
            SectionFrame.Size = UDim2.new(1, 0, 0, 36 + SectionContainer.UIListLayout.AbsoluteContentSize.Y + 10)
        end)
        
        local Section = {
            Name = Title,
            Container = SectionContainer,
            Frame = SectionFrame,
            Tab = Tab
        }
        
        -- Add elements functions
        local Elements = require(script.Elements)
        
        function Section:AddButton(Config)
            return Elements.Button:New(Config, Section.Container)
        end
        
        function Section:AddToggle(Name, Config)
            return Elements.Toggle:New(Name, Config, Section.Container)
        end
        
        function Section:AddSlider(Name, Config)
            return Elements.Slider:New(Name, Config, Section.Container)
        end
        
        function Section:AddDropdown(Name, Config)
            return Elements.Dropdown:New(Name, Config, Section.Container)
        end
        
        function Section:AddColorPicker(Name, Config)
            return Elements.Colorpicker:New(Name, Config, Section.Container)
        end
        
        function Section:AddInput(Name, Config)
            return Elements.Input:New(Name, Config, Section.Container)
        end
        
        function Section:AddKeybind(Name, Config)
            return Elements.Keybind:New(Name, Config, Section.Container)
        end
        
        function Section:AddLabel(Text)
            local LabelFrame = Creator.New("Frame", {
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 20),
                Parent = Section.Container
            })
            
            local Label = Creator.New("TextLabel", {
                FontFace = CelestialLibrary.Font,
                Text = Text,
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                BackgroundTransparency = 1,
                Size = UDim2.fromScale(1, 1),
                Parent = LabelFrame,
                ThemeTag = {
                    TextColor3 = "SubText"
                }
            })
            
            -- Update function
            local LabelObj = {
                Frame = LabelFrame,
                Label = Label
            }
            
            function LabelObj:SetText(NewText)
                Label.Text = NewText
            end
            
            return LabelObj
        end
        
        table.insert(Tab.Sections, Section)
        return Section
    end
    
    -- Tab interaction
    Creator.AddSignal(TabButton.MouseButton1Click, function()
        Tab:Select()
    end)
    
    table.insert(self.Tabs, Tab)
    
    -- Select the first tab by default
    if #self.Tabs == 1 then
        Tab:Select()
    end
    
    -- Update the layout of tabs
    ScrollingFrame.CanvasSize = UDim2.new(0, ScrollingFrame.UIListLayout.AbsoluteContentSize.X, 0, 0)
    
    return Tab
end

function CelestialLibrary:Notify(Config)
    Config = Config or {}
    Config.Title = Config.Title or "Notification"
    Config.Content = Config.Content or "Content"
    Config.SubContent = Config.SubContent or ""
    Config.Duration = Config.Duration or 5
    Config.Buttons = Config.Buttons or {}
    
    local NotificationFrame = Creator.New("Frame", {
        Size = UDim2.new(0, 300, 0, Config.SubContent ~= "" and 120 or 100),
        BackgroundTransparency = 0,
        Position = UDim2.new(0, 0, 0, 0),
        AnchorPoint = Vector2.new(0, 0),
        ThemeTag = {
            BackgroundColor3 = "NotificationBackground"
        },
        Parent = self.NotificationsFrame
    }, {
        Creator.New("UICorner", {
            CornerRadius = UDim.new(0, 6)
        }),
        Creator.New("UIStroke", {
            Thickness = 1,
            Transparency = 0.5,
            ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
            ThemeTag = {
                Color = "NotificationBorder"
            }
        })
    })
    
    local NotificationContent = Creator.New("Frame", {
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Parent = NotificationFrame
    }, {
        Creator.New("UIPadding", {
            PaddingBottom = UDim.new(0, 10),
            PaddingLeft = UDim.new(0, 10),
            PaddingRight = UDim.new(0, 10),
            PaddingTop = UDim.new(0, 10)
        })
    })
    
    local NotificationTitle = Creator.New("TextLabel", {
        FontFace = self.Font,
        Text = Config.Title,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Center,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 20),
        Position = UDim2.new(0, 0, 0, 0),
        Parent = NotificationContent,
        ThemeTag = {
            TextColor3 = "Text"
        }
    })
    
    local NotificationText = Creator.New("TextLabel", {
        FontFace = self.Font,
        Text = Config.Content,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Top,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 40),
        Position = UDim2.new(0, 0, 0, 25),
        Parent = NotificationContent,
        ThemeTag = {
            TextColor3 = "SubText"
        }
    })
    
    if Config.SubContent ~= "" then
        local NotificationSubText = Creator.New("TextLabel", {
            FontFace = self.Font,
            Text = Config.SubContent,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 12,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextYAlignment = Enum.TextYAlignment.Top,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 0, 20),
            Position = UDim2.new(0, 0, 0, 70),
            Parent = NotificationContent,
            ThemeTag = {
                TextColor3 = "SubText"
            }
        })
    end
    
    local ButtonsFrame = Creator.New("Frame", {
        Size = UDim2.new(1, 0, 0, 30),
        Position = UDim2.new(0, 0, 1, -40),
        BackgroundTransparency = 1,
        Parent = NotificationContent
    }, {
        Creator.New("UIListLayout", {
            FillDirection = Enum.FillDirection.Horizontal,
            HorizontalAlignment = Enum.HorizontalAlignment.Right,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 8)
        })
    })
    
    for _, ButtonConfig in ipairs(Config.Buttons) do
        local Button = Creator.New("TextButton", {
            FontFace = self.Font,
            Text = ButtonConfig.Text,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 14,
            BackgroundTransparency = 0,
            Size = UDim2.new(0, 100, 1, 0),
            Parent = ButtonsFrame,
            ThemeTag = {
                BackgroundColor3 = "Secondary",
                TextColor3 = "Text"
            }
        }, {
            Creator.New("UICorner", {
                CornerRadius = UDim.new(0, 4)
            }),
            Creator.New("UIStroke", {
                Thickness = 1,
                Transparency = 0.5,
                ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
                ThemeTag = {
                    Color = "Border"
                }
            })
        })
        
        Creator.AddSignal(Button.MouseButton1Click, function()
            if ButtonConfig.Callback then
                ButtonConfig.Callback()
            end
            NotificationFrame:Destroy()
        end)
        
        -- Add hover/click effect
        local MouseEnter, MouseLeave, MouseButton1Down, MouseButton1Up
        
        MouseEnter = Creator.AddSignal(Button.MouseEnter, function()
            TweenService:Create(Button, TweenInfo.new(0.2), {BackgroundTransparency = 0.8}):Play()
        end)
        
        MouseLeave = Creator.AddSignal(Button.MouseLeave, function()
            TweenService:Create(Button, TweenInfo.new(0.2), {BackgroundTransparency = 0}):Play()
        end)
        
        MouseButton1Down = Creator.AddSignal(Button.MouseButton1Down, function()
            TweenService:Create(Button, TweenInfo.new(0.1), {BackgroundTransparency = 0.6}):Play()
        end)
        
        MouseButton1Up = Creator.AddSignal(Button.MouseButton1Up, function()
            TweenService:Create(Button, TweenInfo.new(0.1), {BackgroundTransparency = 0.8}):Play()
        end)
    end
    
    -- For automatic dismiss
    if #Config.Buttons == 0 then
        task.spawn(function()
            task.wait(Config.Duration)
            if NotificationFrame and NotificationFrame.Parent then
                NotificationFrame:Destroy()
            end
        end)
    end
    
    return NotificationFrame
end

return CelestialLibrary
